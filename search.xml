<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[hexo和git搭建博客]]></title>
      <url>%2F2017%2F04%2F22%2Fhexo%E5%92%8Cgit%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[Hexo和Git搭建博客Git$ cd ~/. ssh #检查本机已存在的ssh密钥 如果提示：No such file or directory 说明你是第一次使用git。 $ ssh-keygen -t rsa -C &quot;邮件地址&quot; 然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key： 测试是否成功 $ ssh -T git@github.com # 注意邮箱地址不用改 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到： Hi RainyXY! You’ve successfully authenticated, but GitHub does not provide shell access. 看到这个信息说明SSH已配置成功！ $ git config --global user.name &quot;RainyXY&quot; // 你的github用户名，非昵称 $ git config --global user.email &quot;xxx@qq.com&quot; // 填写你的github注册邮箱 Hexo 安装 $ npm install -g hexo 初始化 在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是D:\Rainy，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。 $ cd /d/Rainy/ $ hexo init hexo会自动下载一些文件到这个目录，包括node_modules， $ hexo g # 生成 $ hexo s # 启动服务 这里有必要提下Hexo常用的几个命令： hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹 hexo server (hexo s) 启动本地web服务，用于博客的预览 hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台） 另外还有其他几个常用命令： $ hexo new &quot;postName&quot; #新建文章 $ hexo new page &quot;pageName&quot; #新建页面 常用简写 $ hexo n == hexo new $ hexo g == hexo generate $ hexo s == hexo server $ hexo d == hexo deploy 常用组合 $ hexo d -g #生成部署 $ hexo s -g #生成预览 打开浏览器，输入localhost:4000,就可以在本地看到你的个人博客了 管理博客 配置信息 使用Sublime_Text编辑器（绿色软件无需安装，解压即可使用）打开blog/_config.yml文件，进行配置 修改主题 既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是 官方主题。 个人比较喜欢的2个主题：hexo-theme-jekyll 和 hexo-theme-yilia。 首先下载这个主题： $ cd /d/blog/ $ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 修改_config.yml中的theme: landscape改为theme:yilia，然后重新执行hexo g来重新生成。 如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。 上传之前在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。 上传到github如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。 首先，ssh key肯定要配置好。 其次，配置_config.yml中有关deploy的部分 博客名称 title: 我的博客 副标题 subtitle: 简介 description: 博客作者 author: Rainy 博客语言 language: zh-CN 时区 timezone: 博客地址,与申请的GitHub一致 url: http://RainyXY.github.io root: / 博客链接格式 permalink: :year/:month/:day/:title/ permalink_defaults: source_dir: source public_dir: public tag_dir: tags archive_dir: archives category_dir: categories code_dir: downloads/code i18n_dir: :lang skip_render: new_post_name: :title.md # File name of new posts default_layout: post titlecase: false # Transform title into titlecase external_link: true # Open external links in new tab filename_case: 0 render_drafts: false post_asset_folder: false relative_link: false future: true highlight: enable: true line_number: true auto_detect: true tab_replace: default_category: uncategorized category_map: tag_map: 日期格式 date_format: YYYY-MM-DD time_format: HH:mm:ss 分页，每页文章数量 per_page: 10 pagination_dir: page 博客主题 theme: landscape 发布设置 deploy: type: git RainyXY改为你的github用户名 repo:git@github.com:RainyXYRainyXY.github.io.git branch: master 上传之前 在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。 上传到github 如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。 首先，ssh key肯定要配置好。 其次，配置_config.yml中有关deploy的部分： 正确写法： deploy: type: git repository: git@github.com:liuxianan/liuxianan.github.io.git branch: master 发布博客 设置git身份信息 $ git config --global user.name &quot;你的用户名&quot; $ git config --global user.email &quot;你的邮箱&quot; 安装hexo git插件 $ cnpm install hexo-deployer-git --save 发布更新博客 $ hexo d -g 发布时需要输入github的帐号和密码，输入密码时是看不到自己输入的内容的 发布成功后，访问yourname.github.io看下成果]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F04%2F22%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[前端总结]]></title>
      <url>%2F2017%2F03%2F16%2F%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[互联网的飞速发展和激烈竞争，用户体验成为了一个重要的关注点，导致前端开发成为一个热门职业，而前段技术也在不断的更新，不断的推陈出新。个人觉得前端开发入门相对容易，但还是需要系统的学习，打下坚实的基础，从而基础就是开发令用户满意的体验效果的基石。web是基于Internet的一个多媒体信息服务系统。 前端开发的必备技能 我觉得前端开发最应该掌握熟练的技能： 1、html语法、标签、语义。 2、Css：一、样式规范、书写规范；二、选择器；三、与html配合布局；四、常见浏览器的兼容；五、ss3(animation、gradient等等)。 3、Javascript语言、jq，对DOM、文档等的操作，方法的封装、功能插件化，node.js等的基础和常用api。 4、框架：Bootstrap等一系列的框架，提高项目效率和可扩展性。 在工作中只有熟练的掌握这些技能才能更好的完成项目、才能在项目中遇到新技术时更加快速的学习，并运用到项目中。 前端开发除了这些技能还有很多技能，前端是个庞大的技能树。 前端开发应掌握的工具 只有恰当的工具才能提升我们的工作效率，及学习效率。从而将中单放到工作中，学习中。 1、编译工具：Dreamweaver、webStorm、sublime Text等编译工具。 2、测试工具：手机端的微信web开发者工具。 3、浏览器：Google Chrome、mozilla firefox对各种标准很好的支持，同时自带调试功能，能有效的调试代码BUG，提升工作效率。 4、辅助工具：PhotoShop切图、编辑图片、取色等。 5、版本控制工具：git版本控制器分布式管理系统，可以创建多个分支，使大家分工明确，更方便讲前端组件化模块化。 6、本地服务器工具：XAMPP、WampServer 等。 开发总结 1、在过去的开发中让我认识到前端组件化，模块化的重要性。 2、书写规范： 1）html书写规范：html书写要符合语义。 2）Css样式书写规范：应用属性的精简写法提高观赏性和提高性能；使用多重选择器，提高可重用性；减少层级写法，少使用id，id是唯一标识。 3）命名面向属性和面向对象还命名。 4）使用标准的编码utf-8。 5）Js操作元素，使用的class，不添加任何样式，只做操作。同时命名也必须规范如js-**-**、js-**_**等等。 3、调试工具：chrome dev tools：前端开发调试利器，着重注意几个功能： 1）console 2）elements:元素样式调整 3）network：查看每个请求，非常重要，前后端联调必备 4）timeline：分析渲染、js执行等等各个阶段，性能优化利器 5）emulation：模拟移动端环境，mobile页面开发必备 使用jQuery jQuery 是一个 JavaScript 库。 jQuery 极大地简化了 JavaScript 编程。 jQuery 很容易学习。 Jq里面封装了很多方法可以直接使用：如文档操作html()、属性操作attr()、css操作css()、自定义动画效果操作animate()等。 极大的提升我们前端开发过程。 使用swiper Swiper是一款强大的动画效果插件，兼容pc、手机。 前端开发应掌握的工具 只有恰当的工具才能提升我们的工作效率，及学习效率。从而将中单放到工作中，学习中。 1、编译工具：Dreamweaver、webStorm、sublime Text等编译工具。 2、测试工具：手机端的微信web开发者工具。 3、浏览器：Google Chrome、mozilla firefox对各种标准很好的支持，同时自带调试功能，能有效的调试代码BUG，提升工作效率。 4、辅助工具：PhotoShop切图、编辑图片、取色等。 5、版本控制工具：git版本控制器分布式管理系统，可以创建多个分支，使大家分工明确，更方便讲前端组件化模块化。 6、本地服务器工具：XAMPP、WampServer 等。 开发总结 1、在过去的开发中让我认识到前端组件化，模块化的重要性。 2、书写规范： 1）html书写规范：html书写要符合语义。 2）Css样式书写规范：应用属性的精简写法提高观赏性和提高性能；使用多重选择器，提高可重用性；减少层级写法，少使用id，id是唯一标识。 3）命名面向属性和面向对象还命名。 4）使用标准的编码utf-8。 5）Js操作元素，使用的class，不添加任何样式，只做操作。同时命名也必须规范如js-**-**、js-**_**等等。 3、调试工具：chrome dev tools：前端开发调试利器，着重注意几个功能： 1）console 2）elements:元素样式调整 3）network：查看每个请求，非常重要，前后端联调必备 4）timeline：分析渲染、js执行等等各个阶段，性能优化利器 5）emulation：模拟移动端环境，mobile页面开发必备 使用jQuery jQuery 是一个 JavaScript 库。 jQuery 极大地简化了 JavaScript 编程。 jQuery 很容易学习。 Jq里面封装了很多方法可以直接使用：如文档操作html()、属性操作attr()、css操作css()、自定义动画效果操作animate()等。 极大的提升我们前端开发过程。 使用swiper Swiper是一款强大的动画效果插件，兼容pc、手机。]]></content>
    </entry>

    
  
  
</search>
