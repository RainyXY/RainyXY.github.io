<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[前端学习指南]]></title>
      <url>%2F2017%2F03%2F09%2F%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97%2F</url>
      <content type="text"><![CDATA[前端初学路线指南这篇文章本是我写给一个初学前端开发的网友的答案：看这里 之所以写这么长，是因为题主洋洋洒洒列了一大堆想学的东西，过于多了，贪多嚼不烂。 而且，学东西，总要分个轻重缓急的。任何一门知识，都有个层次，有些知识的前置知识多，后置知识少，就适合后学；有些知识前置知识少，后置知识多，就得先学，而且要认真学；还有些知识，和科目中的大部分东西都不相关，一时半会儿也用不上，这种就可以暂时搁不学（比如canvas）。 所以，作为一个尚记得初学经历的人，我给题主列了一个建议学习路径，这也是我对大部分初学前端的朋友的建议。注意，这是给初学者的建议，如果你有很丰富的编程经验，只是想兼修一下前端，那你完全没必要看下面的文字。 这篇答案我并没有像一般的技术文章一样分门别类，做的很结构化，而是用了流水账一样的文字去表述。读起来可能比较凌乱，但是我之所以这样写是有原因的——因为我想还原一个真实的学习过程，从细节和体验的层面描述每一步注意什么，收获什么，而不是用术语组织起一篇专业却泛泛的文字。 以及，答案的评论中有网友说我国语轻视css了。其实不是轻视，而是觉得css技术更多的是一些方法论，这种东西不做实际项目是很难真正有收获的，与其在初学时期把时间浪费在看css书上（还记不住），不如先依靠直觉+W3School把自己想搭的页面搭出来，以后慢慢补充不迟。 —- 以下为正文 —- 建议学习路径：三天时间学习 html 相关语法，别一页一页得看书，大致看下每个标签干嘛的，然后 F12 打开调试器，看看知乎的页面怎么堆起来的，收获对 html 的直觉。 一周时间学习 css，也别一页一页得看书，快速了解 DOM 和 selecter 是怎么回事儿，然后尝试两三种常用布局，比如两栏、三栏、悬浮 header（可以顺便看下 flex 布局），收获对 css 的直觉。 剩下的时间一头扎进 js 就行了，什么工具链也别用，es6 什么的也先别管。集中精力阅读《jsvascript 高级编程》和 DOM 无关的前几章，了解 js 语法，顺便搞清楚“js 编程”是在干嘛。 等你差不多知道 js 编程是怎么回事儿了，就可以做练习题找找感觉了。 从最简单的开始，比如打印三角形； 再来点稍微复杂的，比如找出 1 到 100000 里面所有的素数； 最后来点经典算法，比如快速排序、hash 表（网上有代码，可以逐行读懂然后默写）；这个过程，放长一点，一到两个月吧，一来是找找编程的感觉，二来是了解一下计算机是怎样处理问题的。 至此，你已经初步会用 js 编程了。 这一关过了，就可以了解浏览器 api 和 jquery 了。别管浏览器兼容，那是 legacy，早晚没用。这一块可以边看文档边练，随时做一些小练习，比如点击按钮，给某个 div 变色。 没必要每个 api 都练，重点掌握 jquery 的 $ 符（对应原生的 querySelectorAll）、attr（对应原生的 get/setAttribute）、add/remove/hasClass、bind/unbind（对应原生的 add/removeEventListener）、原生setTimeout 等若干重要方法。一定要搞清楚事件冒泡、事件代理的概念。注意 console.log 这个函数可以很方便的打印任何对象，有助于你调试。 这个过程可长可短，不要给自己设定严格的时间。建议分两步走： 第一步，熟练掌握监听 DOM 事件，在回调里修改 DOM 节点属性导致网页变样这套模式。同时也通过应用深化一下对 js 的了解，比如 this 指针到底指向谁（原型链相关的就先算了）。在这个过程中编写几个“像网页”的网页。就是长得想那么回事儿，鼠标点点还能变的页面。至此，你已经初步会写网页了。 第二步，当你能熟练使用 js 监听事件、修改 DOM 属性的时候（比如你能做出一个简单仿 blog 文章列表页，打开页面显示文章列表，点击文章标题弹出浮层现实全文，点击删除按钮可以删除文章），可以开始锻炼一下逻辑思维。选一个你比较熟悉的小课题，就是那种功能你很清楚，但是一时半会儿想不明白怎么做的小程序，比如网页版俄罗斯方块、贪吃蛇，自己想办法把它做出来（尽量简化，先别琢磨什么关卡、难度之类的事儿）。可以查资料，但是最终要手敲。注意数据与展示分离，你程序中的状态是一回事儿，找一个全局对象存储它，展示到网页上是另一回事儿，写一个函数，根据那个全局对象里的数据集中修改 DOM。你要是混淆到一块儿去，保证你做不出来。另外注意分模块，不相干的代码，要分写在不同的文件里。 至此，你已经是一个编程爱好者，能用代码做出实际功能了。 等你把小程序做出来了，就可以关注下代码习惯了。设计模式什么的你先别关心，去网上找一个 js 编程规范，百度的，airbnb 的都可以，照着改，改到符合规范为止。 到这里练习可以暂时停止了，重新找出你那本《javascript 高级编程》，认认真真看一遍，每有所悟，按照你的新想法修改之前你写过的练习代码。注意着重理解前面点到为止的概念，比如 原型链、闭包、ajax 等等。 等你看完了，觉得这本书对你来说难度仅在于体会背后的意义而不是理解内容本身了，就可以停下了，最难的部分你已经学完了。 至此，你应该具备了相当的自学能力，对前端的理解力已经不是往日可比。 下一步是工程化你的代码。 先安装 nodejs，学习 nodejs 的基础知识，搞清楚 nodejs 是用来干什么的，npm 又是干什么的（先别管服务器端的那些东西，暂时你还玩不动，nodejs api 方面，会读写文件暂时就够用了）。然后去网上搜索“js 打包”、“eslint”等词条，搞清楚什么是前端工程化，为什么要工程化。 等你看懂了，拿出你做的小程序，去网上搜索 webpack 的用法，用 webpack 把它打包成发布脚本。多摆弄一下 webpack 的配置，比如把 jquery 打包到你的程序里，以及单独引用到网页里，分别试试，再比如把 css 打包到程序里，以及打包为单独的 css 文件。注意多上网搜索，搞清楚每种配置的意义是什么，对性能和代码维护有什么影响。 现在，配合着 webpack，如果你愿意，你可以学习一下 es6、less 等新工具了。相比上面的东西，这些东西极其简单，花不了你多长时间。如果你不愿意，可以暂时搁置。 至此，主要基础设施已经建设完毕。 但是你还有两个缺憾，第一，你没写过真正的网站，第二，你对 css 还不太懂。 所以我们还需要最后的练习，一个简单网站项目。写个什么网站你说了算，比如你可以仿一下知乎或者优酷的部分页面，你可以设想一个主流程，比如用户登录–视频列表–视频播放，这就是三个页面。 这个练习目的有三个： 第一，学习框架使用。 第二，练习 css 使用。 第三，体会多页面项目的开发过程。 为了达到第一目的，你要学习一下前端框架。不要觉得这很难，鉴于你前面基础不错，现在你应该完全可以看看框架文档就敲出 demo 代码来（如果不行，说明你前面敷衍了）。 初学我推荐 React＋reflux 的组合，为啥是这俩呢，按理说 vue2.0 入门最方便？ 一来，现在用 React 的团队确实比较多； 二来，现在新版本的 angular 和 vue 都混合了各家思想，反倒是 React 思想最单纯； 第三，reflux 虽然不时髦，但是语法很朴实，不容易迷糊； 第四，vue 的文档做的太好了，过于好了……我觉得练习嘛，还是顺便练练检索和英语比较好对吧。 关于框架，我不想掰开细说。因为如果你多少是个 make sense 的人，经过上面那个使用 jquery 的小程序练习，应该已经发现，贪吃蛇这个程度的程序，其实就是三件事——管理程序中的状态（如果你是理工出身，可以联想一下状态矩阵、状态方程等概念），把状态画出来（可以联想控制论中的传递函数），以及监听事件改变状态。然后你可能已经产生了一些想法，认为这三件事儿的实现其实是有规律可循的，甚至总结出了一套代码结构和一些公用工具。如果是这样，那就简单了，所谓框架，就是那些比你经验丰富的老司机给出的结构和工具。对照着你的理解，你可以把框架的每个部分和你脑子里的部分对应起来。这时候，理解框架会变得极其容易。 剩下的就是你自己的事儿了，如何用 webpack 组织代码，如何把 css 写的尽量还原你仿的站，如何用 react 把页面中的功能实现出来（比如视频播放页，左边视频列表，右边播放器，列表和播放器都自己写，以及点击列表中的视频播放器不刷新网页直接切换这样的联动），慢慢嗑，不着急。如果你学了 es6 和 less，可以都用上。 三个注意：注意使用第三方库提高开发效率，比如显示时间，就可以用 moment.js。 注意代码规范，时刻不要忘记规范。 注意思考程序设计，哪些是公共代码，哪些是组件代码，哪些是页面代码，代码如何复用，等等。可以翻翻《设计模式》，但是不建议套用，尤其是不理解的模式不要用。等你最后这个练习也做得像模像样了，你将收获以下成就： 现在你的编程基础跟靠前端吃饭的人比，不算垫底的（这个标准其实不高，你懂的各行各业都有些基本功一塌糊涂的人）。 你已经具备成为职业前端工程师的常识和潜力，换句话说，如果你真的想做编程工作，可以为求职做准备了。 后面的事情，就不是你要学什么，而是你想做什么了——你可以再多做点练习，比如编写自己的个人网站。也可以深挖原理，比如阅读库或者框架代码，等等，看你的兴趣了。当然，也可以边求职边学习（虽然说实话现在前端领域对初学者有种不友好的趋势），面试中暴露的短板，就可以着重补充。比如你想做移动端，却不了解 click 延时和点透是什么，就可以着重补充移动端技术，等等。总之，随缘就好。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[WebFrontEndStack]]></title>
      <url>%2F2017%2F03%2F08%2FWebFrontEndStack%2F</url>
      <content type="text"><![CDATA[爆栈系统开发技术栈、Web前端开发技术栈、数据库技术栈、.NET技术栈！http://overflowstack.github.io 本地化English:https://github.com/unruledboy/WebFrontEndStack/ 中文博客:http://www.cnblogs.com/unruledboy/p/WebFrontEndStack.html Español:https://github.com/unruledboy/WebFrontEndStack/blob/master/README.es-es.md Web前端技术栈比较全面的浏览器、平台、类库、框架、工具等。 自行生成预览图准备环境您应该安装Visual Studio 2010+。 安装 nodejs. 安装 Phantomjs. 安装 Python 2.7. npm install 如果出现错误，您可以检查 [phantomjs-node] 的依赖(https://github.com/sgentle/phantomjs-node/wiki), node-gyp. 运行命令npm start 运行服务并直接打开主html文件。 npm run build 生成预览图。 选项1234567-h, --help Display this message.-p, --port number (Default: 3000) Set the port what express listening.-ues, --update_existed_stargazers (Default: false) Update project&apos;s stargazers including existed.--phantomjs The task to generate the image.--readme The task to update readme.--updatestargazers The task to update the count of the stargazers. 为什么？大家是否想过： Web前端开发究竟包含哪些技术呢？ 我所掌握的技术这个子集，在Web前端技术大系这个超集里面占的比例是多少呢？ 我究竟还没有掌握多少Web前端技术呢？ 面试的时候会考哪些技术呢？ 那么，Web前端开发是否也应该有这样的技术栈概览图呢？搜索了很久，没有找到一个符合我要求的“较为全面”地表述Web前端技术大系的图表。所以我们自行设计了这个Web前端技术栈。 这个图表里的分类未必准确，相关技术也难免会有遗漏，欢迎大家指点以便不断改进。 Web前端技术实在太繁多限于篇幅，，这里没有罗列一些技术。 您可以点击下面链接查看交互式预览图(用鼠标移动/缩放/点击节点打开相关网站)： https://rawgit.com/unruledboy/WebFrontEndStack/master/ux/WebFrontEndStack.htm?locale=zh-cn Web前端技术栈 Web前端开发技术栈 浏览器 Internet Explorer Chrome Firefox Safari Opera Edge Netscape ;-) 协议 HTTP/1.1 链接 会话 授权 请求 响应 HTTP/2 压缩 打包 服务器端推送 WebSocket Web三剑客 HTML (HyperText Markup Language) CSS (Cascading Style Sheets) JavaScript 标准 W3C HTML CSS XHTML XML 核心概念 HTML DOM Element Attribute JavaScript Prototype Scope Closure JSON (JavaSript Object Notation) AJAX (Asynchronous JavaScript and XML) CSS Selector Priority Specificity Box Model 渲染引擎 Trident (IE)) Blink / prev. WebKit (Chrome) Gecko (Firefox) WebKit (Safari) Blink / prev. Presto (Opera) EdgeHTML (Edge) 脚本引擎 JScript (IE8- / ASP) Chakra (IE9+ / Edge)) V8 (Chrome / Opera / Nodejs / MongoDB) [GitHub] SpiderMonkey (Firefox) JavaScriptCore (Safari) 运行时 Cookie Local Cache Session Storage Local Storage Components Extensions Plugins Resources Images Icons Fonts Audios Videos 编辑器 Sublime Text WebStorm Atom [GitHub] Vim Emacs Brackets [GitHub] Light Table [GitHub] Visual Studio Visual Studio Code (Linux &amp; Mac) [GitHub] Dreamweaver ;-) FrontPage / SharePoint Designer ;-) 编译任务 精简 编译 合并 混淆 图像优化 单元测试 编译工具 Grunt [GitHub] Gulp [GitHub] Brunch [GitHub] Yeoman Broccoli [GitHub] 调试 Developer Tools Firebug [GitHub] 基础工具 Node.js [GitHub] Phantom.js [GitHub] SpiderMonkey 质量控制 JSLint [GitHub] JSHint [GitHub] jscs [GitHub] Closure Linter 包管理 npm [GitHub] Bower [GitHub] 测试 工具 QUnit [GitHub] Jasmine [GitHub] Mocha [GitHub] Selenium [GitHub] WebDriverIO [GitHub] Protractor Chai [GitHub] Sinon.JS [GitHub] Karma [GitHub] nodeunit [GitHub] tape [GitHub] nightmare [GitHub] 在线工具 Sauce Labs Browser Stack Browser Shots Browserling Browser Sandbox Cross Browser Testing Browsera SortSite 库 / 框架 基础库 jQuery [GitHub] Prototype [GitHub] Zepto [GitHub] MooTool [GitHub] 模块化 ES6 Module CommonJS webpack [GitHub] browserify [GitHub] AMD RequireJS [GitHub] UMD umd [GitHub] 框架 AngularJS [GitHub] Backbone [GitHub] Knockout [GitHub] Ember [GitHub] React [GitHub] polymer [GitHub] Deft.js [GitHub] Vue [GitHub] Riot [GitHub] UI框架 Bootstrap [GitHub] Semantic UI [GitHub] Foundation [GitHub] Material UI [GitHub] WinJS [GitHub] Pure [GitHub] Amaze UI [GitHub] WebSocket Socket.io [GitHub] web-socket-js [GitHub] 数据可视化 D3 [GitHub] Echarts [GitHub] HighCharts [GitHub] Vis.js [GitHub] Flot [GitHub] WebGL Three.js [GitHub] Babylon.js [GitHub] Pixi.js [GitHub] CSS3 动画 Animate.css [GitHub] bounce.js [GitHub] Effeckt.css [GitHub] move.js [GitHub] 流程控制 ES6 Promise Generator ES7 yield await async [GitHub] co [GitHub] Promise Bluebird [GitHub] q [GitHub] when.js [GitHub] 函数式编程 bacon.js [GitHub] immutable.js [GitHub] ramda [GitHub] underscore.js [GitHub] lodash [GitHub] ReactiveX [GitHub] 手机 UI 框架 jQuery Mobile [GitHub] Jo [GitHub] Dojo Mobile Lungo [GitHub] CSS 预处理器 LESS LESS [GitHub] Hat [GitHub] Sass(SCSS) Compass [GitHub] Bourbon [GitHub] Gumby [GitHub] Stylus nib [GitHub] 未来标准 babel [GitHub] 模板引擎 Handlebars [GitHub] Haml [GitHub] Slim [GitHub] Jade [GitHub] Ejs Spacebars mustache [GitHub] 统一化 Normalize [GitHub] Reset 最佳实践 SEO Responsiveness CDN 安全 Sandbox XSS CORS 中间语言 CoffeeScript [GitHub] TypeScript [GitHub] ClojureScript [GitHub] JSX (Facebook) 移动应用开发 PhoneGap / Cordova [GitHub] MUI [GitHub] React Native [GitHub] Ionic [GitHub] 桌面应用开发 Electron [GitHub] NW.js [GitHub]]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[换了电脑使用Hexo更新博客]]></title>
      <url>%2F2017%2F03%2F07%2F%E6%8D%A2%E4%BA%86%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8Hexo%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[Hexo生成的文件里面是有一个.gitignore的，所以它的本意应该也是想我们把这些文件放到GitHub上存放的。但是考虑到如果每个GitHub Pages都需要额外的一个仓库存放这些文件，就显得特别冗余了。 这个时候就可以用分支的思路！一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页。 最近我也用GitHub Pages搭建了一个独立博客，想到了这个方法，使用之后真的特别简洁。为了更直观地说明，奉上使用这种方法不同时候的流程： ———————————————————– 华丽的分割线 ———————————————————- 一、关于搭建的流程 创建仓库，http://CrazyMilk.github.io； 创建两个分支：master 与 hexo； 设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）； 使用git clone git@github.com:CrazyMilk/CrazyMilk.github.io.git拷贝仓库； 在本地http://CrazyMilk.github.io文件夹下通过Git bash依次执行npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）; 修改_config.yml中的deploy参数，分支应为master； 依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件； 执行hexo g -d生成网站并部署到GitHub上。这样一来，在GitHub上的http://CrazyMilk.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！ 二、关于日常的改动流程在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理。 依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）； 然后才执行hexo g -d发布网站到master分支上。虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。 三、本地资料丢失后的流程当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤： 使用git clone git@github.com:CrazyMilk/CrazyMilk.github.io.git拷贝仓库（默认分支为hexo）； 在本地新拷贝的http://CrazyMilk.github.io文件夹下通过Git bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[NexT主题优化]]></title>
      <url>%2F2017%2F03%2F05%2FNexT%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%2F</url>
      <content type="text"><![CDATA[前言本篇文章是在已经搭建好gitpage+hexo的博客的前提下（不懂怎么搭建的可以参考我的另一篇博文：极简搭建博客 或者Hexo和Git搭建博客，这两篇博文都教了大家最基础的怎么将博客搭建起来。本篇博文是使用next主题的进击版本，主要是有以下内容 域名绑定，将github博客和你的独有域名绑定 添加更多的menu内容 添加头像 定义网站个性logo 自定义样式，重写默认样式，个性化定制你的博客 炫酷动态背景制作 添加网易云音乐 添加网易云跟帖 添加leancloud阅读次数统计功能 添加wordcount页面字数统计 添加fork me on github功能 要想最快的知道这些功能的效果，请移步我的个人博客：https://rainyxy.github.io/，顺便求个forkヽ(●´ε｀●)ノ首先要说一下我使用的版本，这个是很重要的，好多版本都已经进行了更新，特别是next主题集成了更多的插件，简直不要太爽＼（＠￣∇￣＠）／ hexo v3.2.2 next v5.1.0 node v4.5.0 在改成自己想要的效果之后，对整体的hexo的next主题我有了一个大概的了解，其实next主题的最新版（5.1）已经集成了大部分我们需要的插件，只需要在主题配置文件中将默认的false改为true即可，但是我们也仍然需要知道都有哪些新的功能，最有效的方法是直接去查看官网的api：next官网 授之于鱼不如授之于渔希望我们都能够理解其源码，制作出属于自己专属的个性化博客(•̀ᴗ•́) 我们需要改的文件其实也就那么几个，大部分是不需要更改，next都已经帮我们配置好了~ 默认目录结构： . ├── .deploy ├── public ├── scaffolds ├── scripts ├── source | ├── _drafts | └── _posts ├── themes ├── _config.yml └── package.json deploy：执行hexo deploy命令部署到GitHub上的内容目录 public：执行hexo generate命令，输出的静态网页内容目录 scaffolds：layout模板文件目录，其中的md文件可以添加编辑 scripts：扩展脚本目录，这里可以自定义一些javascript脚本 source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。 drafts：草稿文章 posts：发布文章 themes：主题文件目录 _config.yml：全局配置文件，大多数的设置都在这里 package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮 我们最先修改的应该是在hexo根目录下的配置文件_config.yml文件，这里是配置整个站点的配置信息，在文章的最后贴出我的配置文件，有兴趣的朋友可以参考一下~ 其次就是我们的主题配置文件 在对应的主题下的_config.yml 因为我使用的是next主题，所以目录的路径为C:\Hexo\themes\next\_config.yml 这里配置的是使用主题的配置文件，这个配置文件的东西就有点多了，我们大部分的修改也是在这个文件下完成的。比如说使用集成的第三方插件，默认为false，我们需要将其改为true并且配置相应的app_key就可以使用该插件了~有木有很方便(^ ◕ᴥ◕ ^) 然后我们需要修改样式的话是需要设置css和甚至是修改模板， 页面展现的全部逻辑都在每个主题中控制，源代码在hexo\themes\你使用的主题\中，以next主题为例： ├── .github #git信息 ├── languages #多语言 | ├── default.yml #默认语言 | └── zh-Hans.yml #简体中文 | └── zh-tw.yml #繁体中文 ├── layout #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制 | ├── _custom #可以自己修改的模板，覆盖原有模板 | | ├── _header.swig #头部样式 | | ├── _sidebar.swig #侧边栏样式 | ├── _macro #可以自己修改的模板，覆盖原有模板 | | ├── post.swig #文章模板 | | ├── reward.swig #打赏模板 | | ├── sidebar.swig #侧边栏模板 | ├── _partial #局部的布局 | | ├── head #头部模板 | | ├── search #搜索模板 | | ├── share #分享模板 | ├── _script #局部的布局 | ├── _third-party #第三方模板 | ├── _layout.swig #主页面模板 | ├── index.swig #主页面模板 | ├── page #页面模板 | └── tag.swig #tag模板 ├── scripts #script源码 | ├── tags #tags的script源码 | ├── marge.js #页面模板 ├── source #源码 | ├── css #css源码 | | ├── _common #*.styl基础css | | ├── _custom #*.styl局部css | | └── _mixins #mixins的css | ├── fonts #字体 | ├── images #图片 | ├── uploads #添加的文件 | └── js #javascript源代码 ├── _config.yml #主题配置文件 └── README.md #用GitHub的都知道 公益404页面GitHub Pages 自定义404页面非常容易，直接在根目录下创建自己的404.html就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。 其实，404页面可以做更多有意义的事，来做个404公益项目吧。现在，看下我的404页面一个ibruce.info上不存在的页面，做点有意义的事情，也对得起这个域名。目前有如下几个公益404接入地址，我选择了腾讯的。404页面，每个人可以做的更多。 腾讯公益404 404公益_益云(公益互联网)社会创新中心 失蹤兒童少年資料管理中心404 开启打赏功能越来越多的平台（微信公众平台，新浪微博，简书，百度打赏等）支持打赏功能，付费阅读时代越来越近，特此增加了打赏功能，支持微信打赏和支付宝打赏。 只需要 主题配置文件 中填入 微信 和 支付宝 收款二维码图片地址 即可开启该功能。 打赏功能配置示例 reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！ wechatpay: /path/to/wechat-reward-image alipay: /path/to/alipay-reward-image 友情链接编辑 主题配置文件 添加： 友情链接配置示例 # title links_title: Links links: MacTalk: http://macshuo.com/ Title: http://example.com/ 站点建立时间这个时间将在站点的底部显示，例如 © 2013 - 2015。 编辑 主题配置文件，新增字段 since。 配置示例 since: 2013 加入站点内容搜索功能本站点使用的是Local Search。加入站点内容搜索功能步骤如下： 安装hexo-generator-searchdb $ npm install hexo-generator-searchdb --save 注意：安装时应在站点根目录下，即myBlog目录下 添加search字段 在站点123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 search: path: search.xml field: post format: html limit: 10000# 主题颜色NexT主旨在于简洁优雅且易于使用，主题本身提供了三种样式供用户选择，但色彩过于单一，今天为大家介绍如何修改主题的颜色和增加背景图片。打开```hexo/themes/next/source/css/_variables/base.styl```找到Colors代码段，如下： // Colors // colors for use across theme. // -------------------------------------------------- $whitesmoke = #f5f5f5 $gainsboro = #eee //这个是边栏头像外框的颜色， $gray-lighter = #ddd //文章中插入图片边框颜色 $grey-light = #ccc //文章之间分割线、下划线颜色 $grey = #bbb //页面选中圆点颜色 $grey-dark = #999 $grey-dim = #666 //侧边栏目录字体颜色 $black-light = #555 //修改文章字体颜色 $black-dim = #333 $black-deep = #495a80 //修改主题的颜色，这里我已经改成老蓝色了。 $red = #ff2a2a $blue-bright = #87daff $blue = #0684bd $blue-deep = #262a30 $orange = #F39D01 //浏览文章时，目录选中的颜色其他的可以自行更改，看看效果# 图床考虑到博客的速度，同时也为了便于博客的迁移，图床是必须的。我墙裂推荐七牛，访问速度极快，支持日志、防盗链和水印。免费用户有每月10GB流量+总空间10GB+PUT/DELETE 10万次请求+GET 100万次请求，这对个人博客来说足够，不够的话点这个活动页面，也可通过邀请好友获得奖励，我也求一下七牛邀请。有一点要说明的是，七牛没有目录的概念，但是文件名可以包含/，比如2013/11/27/reading/photos-0.jpg，参考这里关于key-value存储系统。七牛除了作为图床还可以作为其他静态文件存储空间，比如我的个人站点首页有个字库文件和JS文件下载较慢，有时间会把它弄到七牛上去，以提高首页打开速度。请看这篇Linux中国采用七牛云存储支撑图片访问。如果非要说不足的话，就是文件管理界面不是很友好，不支持CNAME到分配的永久链接，也不能绑定未备案的自有域名，必须备案才可以。如果你对七牛web版的文件管理界面不满意，可以用官方的七牛云存储工具。您还可以使用如下图床服务 FarBox，Dropbox，又拍云。# 主题背景打开```hexo/themes/next/source/css/_schemes/Pisces/index.styl```(Pisces为NexT提供的三种主题之一，根据使用的主题选择）修改```body&#123;&#125;```内的值，如下：背景颜色直接更改即可：```body &#123; background: #F0F0F0; &#125; 添加背景：&#123; background: url（'/images/background.jpg'); &#125;```(将背景图片放到```hexo/source/images```中即可。加入数据统计与分析功能本站点使用的是百度统计。加入数据统计与分析功能步骤如下： - 注册站长账号并登陆 在这里注册站长账号，并填写信息，网站域名和网站首页以下图为例来填写，注册完成后并登陆。![这里写图片描述](https://syd192.github.io/photo/20161115/8.png ) - 在跳转的页面中会显示下图，复制hm.js后的id值 ![这里写图片描述](https://syd192.github.io/photo/20161115/9.png ) - 添加baidu_analytics字段在站点myBlog/_config.yml中添加search字段，值为上步复制的id值至此，该功能已成功加入，大约过20min后在百度统计上可以看到站点的访问情况，如下图：![这里写图片描述](https://syd192.github.io/photo/20161115/10.png )# 隐藏网页底部powered By Hexo / 强力驱动打开```hexo/themes/next/layout/_partials/footer.swig```,使用”&lt;!— —&gt;”隐藏之间的代码即可（隐藏后代码如下），或者直接删除。 这时，该行信息即被隐藏，但留有空白，如果你开启了网站流量统计，那么在统计和版权之间会有空行，很不美观，以下方法修改网站流量统计的位置。我这里使用的是不蒜子统计，其他统计类似。打开```hexo/themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig```将两个&lt;span&gt;标签的class属性改为“powered-by”和“theme-info”，对这里使用了刚才删除hexo和主题信息标签的CSS属性，修改后代码如下： &#123;% if theme.busuanzicount.enable %&#125; &#123;% if theme.busuanzicount.siteuv %&#125; &#123;&#123; theme.busuanzicount.siteuvheader &#125;&#125;&#123;&#123; theme.busuanzicount.siteuvfooter &#125;&#125; &#123;% endif %&#125; &#123;% if theme.busuanzicount.sitepv %&#125; &#123;&#123; theme.busuanzicount.sitepvheader &#125;&#125;&#123;&#123; theme.busuanzicount.sitepvfooter &#125;&#125; &#123;% endif %&#125; &lt;/div&gt; &#123;% endif %&#125;修改后效果如下：![这里写图片描述](http://images2015.cnblogs.com/blog/395235/201611/395235-20161124141926112-883484784.png )图上有没有发现我的是一个五角星，默认为心型，在刚才footer.swig文件中找到如下代码： &lt;span class=&quot;with-love&quot;&gt; &lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt; &lt;/span&gt;修改i标签的class属性fa-love，我这里改成了fa-star，有兴趣的朋友可以试试。# 绑定域名绑定域名的思路如下： - 在万网购买自己喜欢的域名（.com的会贵一点，.site和.xyz的相对便宜一些，有的只需要几块钱一年就可以） - 解析DNS - 在hexo中添加CNAME文件 ## 购买域名之前没有买域名的时候我想使用网易云跟帖，发现在注册网易云跟帖的时候使用原来的域名提示“url已被使用”，这是因为网易云跟帖不认可二级域名，所以要自己买域名。我选择的是[万网](https://wanwang.aliyun.com/)，阿里下面的。我选择了一个`.site`的域名，原价8元，使用阿里云app支付还优惠5元，等于3元到手一个域名（一年）~按照官网的步骤一步一来就可以了~## 解析DNS购买完域名之后我们需要解析DNS地址，在管理控制台中的左侧有域名选项，然后找到你的域名，点击后面的“解析”![这里写图片描述](http://img.blog.csdn.net/20170409132041051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast ) 点击添加解析，记录类型选A或CNAME， &gt; A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，&gt; 解析记录设置两个www和@，线路就默认就行了，CNAME记录值填你的github博客网址。如我的是rainyxy.github.io。## 在hexo中添加CNAME文件接下来在你的hexo文件夹下source文件夹下新建一个CANME文件,里面加上你刚刚购买的域名比如我的`cherryblog.site`![这里写图片描述](http://img.blog.csdn.net/20170409141726073?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )然后你就可以`hexo clean`,`hexo g`，`hexo d` 发布你的博客看看效果啦~![这里写图片描述](http://img.blog.csdn.net/20170409142438270?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )**在这里我出现一个问题，就是单独输入域名是可以访问的，但是前面加上www之后就访问不了了** # 添加菜单页添加菜单页的思路（添加菜单页就是添加一个页面，有两种方式）：第一种是使用git命令`hexo new page &quot;photo&quot;` 就直接创建了` C:\Hexo\source\photo\index.md`文件，然后编辑index.md 文件就可以了~![这里写图片描述](http://img.blog.csdn.net/20170409165246422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)第二种：手动创建上面的文件= = - 在主题的配置文件添加menu索引路径（根路径是hexo/source）,所以你如果想要更改页面的内容就去hexo/source下找到对应的文件夹，默认内容是在其index.md文件下 - 在hexo的source文件下添加对应的文件夹 - 在主题的配置文件添加menu_icon字段设置对应的icon - 修改language文件下zh-hans语言包 - 在发表文章的时候添加对应的menu字段就可以看到 刚开始的时候不理解怎么添加分类页和添加文章的区别，公司有一个项目用到了wordpress，然后发现两者有相似的地方，不同的就是wordpress是有可视化的操作后台，而hexo是需要git bash自己创建**首先我们要分清什么是页面，什么是文章，****在hexo中menu下的内容都是新的页面**我们可以通过`hexo new page &quot;pagename&quot;` 创建，hexo默认的页面只有`home`,`archives`,`tags` 三个，之后我们写的博文就是文章，通过`hexo new &quot;name&quot;` 创建的`name.md` 文件在根目录的`source\_posts` 下，在每一个文章的头部，我们可以配置其tags或者categories内容，相当于文章是页面的下一级 ## 在配置文件中添加menu索引路径我们可以在主题配置的_config文件下找到相应的字段，字段前加`#` 表示被注释掉，我们也可以自己添加menu的内容，比如我又新增了两个menu`life` 和`photo`![这里写图片描述](http://img.blog.csdn.net/20170409143920151?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )这里添加的字段其实是加上文件索引的路径，这里hexo设置的根路径是`hexo/source` 接下来我们在这个根路径下建立相应的文件夹就可以实现点击mune跳转到相应的页面上了![这里写图片描述](http://img.blog.csdn.net/20170409151941047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast ),没有明白什么意思的同学看下图 ## 在source文件添加menu文件夹我们需要在这个路径下自己建立对应的页面，比如说我新建了menu`life` 和`photos`，然后再source文件夹下面新建两个名字为`life` 和`photo` 的文件夹，里面添加一个`index.md` markdown文件，内容是类似这样的 --- title: photo date: 2017-04-04 22:14:07 type: &quot;photo&quot; comments: false --- 啦啦啦~![这里写图片描述](http://img.blog.csdn.net/20170409152554707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )这是一个markdown文件，你可以自己编写## 给menu添加icon如果只是上面的步骤，那么你可能会创建出一个新的页面，但是显示的效果会是这样：![这里写图片描述](http://img.blog.csdn.net/20170409153513929?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )怎么icon没有换？？？其实hexo中换icon是一个很简单的事情，因为hexo集成了`FontAwsome` 所以我们只需要在主题的配置文件中加入相应的icon名字即可![这里写图片描述](http://img.blog.csdn.net/20170409153837056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )## 查找`FontAwsome` icon 这时候你想要换一个自己喜欢的icon怎么办，这就需要自己动手，丰衣足食了，你需要自己到[FontAwsome官网](http://www.bootcss.com/p/font-awesome/#)，然后鼠标往下拉，在图标集中选择自己喜欢的icon，然后记住名字，保存在上面的menu_icon字段中就可以啦~ ![这里写图片描述](http://img.blog.csdn.net/20170409154335951?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)tips ：在字段中只需要填写icon-name后面跟的name即可，不需要加上前面的&quot;icon-&quot;## 在language添加zh-hans翻译字段上面的步骤完成之后你会发现，在你的博客首页显示的仍然是英文名，而我们想要有一个中文的名字，并且想要个性化定制我们的页面，我们可以在主题的language文件下的zh-hans（中文）语言包下增加相应的字段（做过翻译的童鞋应该都知道什么意思~）还可以修改其他的字段，这样就可以定制我们的博客了呢~ ![这里写图片描述](http://img.blog.csdn.net/20170409171442363?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)## 在发表文章的时候添加对应的menu字段在我们写文章的时候只要在头部信息添加相应的字段就在tags页面和categories中显示相应的分类，例如: --- title: Git使用中的报错情况 date: 2017-03-11 23:54:11 tags: [git,实战经验] categories: git ---tags、categories都是支持数组的形式的，可以添加多个tags、categories。这样我们在tags、categories页面就可以看见相应的分类了![这里写图片描述](http://img.blog.csdn.net/20170409172519879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)# 添加头像我使用的主题头像是位于侧边栏，显示的效果如下，![这里写图片描述](http://img.blog.csdn.net/20170409172733268?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)要添加一个这个的头像要怎么操作呢，其实思路就是将你要上传的头像放在你的文件夹中，然后再配置文件中引用正确的路径即可，当然也可以上传绝对路径。在你的主题配置文件找到avatar字段，然后将你得图片路径写在后面，我是新建了一个uploads文件夹，将图片放在下面 # Sidebar Avatar # in theme directory(source/images): /images/avatar.jpg # in site directory(source/uploads): /uploads/avatar.jpg avatar: /uploads/avatar.png![这里写图片描述](http://img.blog.csdn.net/20170409173222538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)或者是一种比较简单的方法在主题下的```source/images/```下放置头像文件```avatar.gif```即可。# 设置网站logo跟设置头像其实是一个思路，都是在配置文件中引入正确的地址就可以了，不过网站的logo是对图片有要求的，我们需要在[Favicon在线制作](http://tool.lu/favicon/)工具中制作32*32的.ico图片，然后放在source/images下面。然后在主题配置文件下添加主题配置文件中添加：`favicon: images/favicon.ico`# 自定义样式不得不说next还是很人性化的，你可以个性化定制你的网站，你所有的改动（css）需要放在主题文件的source/css/_costum/costum.styl文件中，会覆盖原来的css，所以只要你不想要你修改的样式，只需要删除这个文件夹就可以了，再也不用担心还原不回去了~![这里写图片描述](http://img.blog.csdn.net/20170409174107213?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)# 炫酷动态背景之前做过一个类似的canvas-nest的效果。新版本的next已经支持canvas-nest了，但是效果不怎么样，就不用了，但是也介绍一下，毕竟简单，只有两步就可以了。添加修改代码`next/layout/_layout.swig`在`&lt;/body&gt;`之前加上 &#123;% if theme.canvas_nest %&#125; &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt; &#123;% endif %&#125;打开`next/_config.yml`，添加以下代码就可以了： # Canvas-nest canvas_nest: true这种虽然简单，但是我认为效果不够好，于是我决定添加原生的js来仿知乎的登录界面做背景，这就需要修改模板来实现了。首先我们要知道next文件的结构，这样我们想改什么就知道在什么位置了~![这里写图片描述](http://img.blog.csdn.net/20170409180317491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)所以我们需要在layout下面的`_layout.swig` 添加一个canvas然后使用原生js写一个仿知乎页面,详情script代码可以从github上 - clone： - https://github.com/sunshine940326/canvas-nest 内容我放在附录2里了，大家可以去看最下面(*^__^*) # 添加网易云音乐## HTTP环境这次主要分两类来讲，一类是http环境也就是网址格式为&quot;http://www.xxx.com&quot;或&quot;http://xxx.com&quot;的网站在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放，我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器![这里写图片描述](http://img.blog.csdn.net/20170409181717791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)然后可以根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置即可![这里写图片描述](http://img.blog.csdn.net/20170409181941920?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)我放在了`layout/_macro/sidebar.swig` 文件下 &lt;div id=&quot;music163player&quot;&gt; &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=280 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=38358214&amp;auto=0&amp;height=66&quot;&gt; &lt;/iframe&gt; &lt;/div&gt;然后就可以在侧边栏看见我的播放器了~![这里写图片描述](http://img.blog.csdn.net/20170409191354574?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)但是上面介绍的方法，都只能在某一个页面播放，如某一篇文章或者留言板等。一旦页面跳转则没有了…不像WP可以全站背景音乐## HTTPS环境现在使用https的网站越来越多，像百度、淘宝等等都是如此另外使用github搭建hexo的同学们，现在gh-pages已经强制要求全站https啦这种网站格式一般为&quot;https://xxx.github.io&quot;然后…发现网易云音乐已经不能正常使用了由于网易云目前并不支持https，所以我们只能通过插件来实现音乐播放这里需要使用到163music-APlayer-you-get-docker项目在github项目文档上我们可以看见，参数实在是太多，再加上版本迭代和英文介绍，我一脸懵逼…但是在iframe用法里面，我发现有一个demos https://music.daoapp.io/iframe?song=287749&amp;qnarrow=1&amp;qssl=1格式非常像上文介绍的网易云外链，于是我尝试直接替换为 &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;https://music.daoapp.io/iframe?song=287749&amp;qssl=1&amp;qlrc=0&amp;qnarrow=0&amp;autoplay=1&quot;&gt;&lt;/iframe&gt; ``` 也就是把src=””里面的链接换掉，其他保持不变接着来分析这段代码 width和height是播放器的宽度和高度 287749这串数字是网易云音乐的歌曲编号 qlrc=0代表不显示歌词 autoplay=1代表自动播放 这样如果没有特殊要求的话，每次只需在网易云找好歌曲编号，然后替换这串数字即可粘贴到.md文件里面 这个项目的玩法非常多，如果需要显示歌词的话修改qlrc=1为再调整下播放器宽度（width）高度（height）数值 网易云跟帖之前用的是多说，但是多说在2017年6月1日就关闭评论服务了= =，很忧伤，于是转到了网易云跟帖。由于最新版（5.1）版本的next已经集成了网易云跟帖，所以只需要在主题的设置文件中配置你的productKey就可以了。获取productKey也很简单，在官网网易云跟帖中注册，然后在获取代码&gt;通用代码中拿到productKey，之后在你的主题配置文件中的gentie_productKey字段后添加即可~ #添加Fork me on GitHub去网址https://github.com/blog/273-github-ribbons 挑选自己喜欢的样式，并复制代码，添加到themes\next\layout_layout.swig的body标签之内即可记得把里面的url换成自己的! hexo-wordcount实现统计功能wordcount可以实现字数统计，阅读时常还有总字数的统计功能只需要npm install hexo-wordcount --save 就可以安装wordcount插件，主要功能字数统计:WordCount阅读时长预计:Min2Read总字数统计: TotalCount安装完插件之后在主题的配置文件中开启该功能就可以~ # Post wordcount display settings # Dependencies: https://github.com/willin/hexo-wordcount post_wordcount: item_text: true wordcount: true min2read: true leancloud阅读次数统计next也集成了leancloud，在leancloud官网中注册账号等一步一步的操作就不说了哈~，我们主要是为了拿到app_key和app_id,然后在主题配置文件做一下配置 # Show number of visitors to each article. # You can visit https://leancloud.cn get AppID and AppKey. leancloud_visitors: enable: true app_id: yourapp_id app_key: yourapp_key 然后再leancloud的控制台中的存储添加一个counter的class就可以检测到我们的浏览量了，同时在你文章的副标题也可以看到有阅读次数的显示 个人网站地址：https://rainyxy.github.io/，顺便求个fork致谢在这里我聚集了很多人的教程，也希望能让能多的人知道如何去做，还有NexT官网可以参照，希望大家能美化好自己的博客♪(^∇^*) 附录1：站点配置文件# Hexo Configuration ## Docs: https://hexo.io/docs/configuration.html ## Source: https://github.com/hexojs/hexo/ # Site 站点信息 title: Rainy&apos;s Blog #站点名字 subtitle: #副标题 description: 奔跑不单是一种能力，更是一种态度，决定你人生高度的态度。 #站点描述，在侧边栏显示 author: Rainy #博主名字 language: zh-Hans #使用的语言包，语言包在主题文件的language文件夹下，可以更改网站显示出的文案 timezone: # URL ## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos; url: http://RainyXY.github.io root: / permalink: :year/:month/:day/:title/ permalink_defaults: # Directory source_dir: source public_dir: public tag_dir: tags archive_dir: archives category_dir: categories code_dir: downloads/code i18n_dir: :lang skip_render: # Writing new_post_name: :title.md # File name of new posts default_layout: post titlecase: false # Transform title into titlecase external_link: true # Open external links in new tab filename_case: 0 render_drafts: false post_asset_folder: true #新建一个页面后自动生成一个同名文件夹（默认为false） relative_link: false future: true highlight: enable: true line_number: true auto_detect: false tab_replace: # Category &amp; Tag default_category: uncategorized category_map: tag_map: # Date / Time format ## Hexo uses Moment.js to parse and display date ## You can customize the date format as defined in ## http://momentjs.com/docs/#/displaying/format/ date_format: YYYY-MM-DD time_format: HH:mm:ss # Pagination ## Set per_page to 0 to disable pagination per_page: 10 pagination_dir: page # Extensions ## Plugins: https://hexo.io/plugins/ ## Themes: https://hexo.io/themes/ theme: next search: path: search.xml field: post format: html limit: 10000 # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repo: git@github.com:RainyXY/RainyXY.github.io.git branch: master 附录2：背景脚本&lt;script&gt; class Circle { //创建对象 //以一个圆为对象 //设置随机的 x，y坐标，r半径，_mx，_my移动的距离 //this.r是创建圆的半径，参数越大半径越大 //this._mx,this._my是移动的距离，参数越大移动 constructor(x, y) { this.x = x; this.y = y; this.r = Math.random() * 10 ; this._mx = Math.random() ; this._my = Math.random() ; } //canvas 画圆和画直线 //画圆就是正常的用canvas画一个圆 //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理 drawCircle(ctx) { ctx.beginPath(); //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。 ctx.arc(this.x, this.y, this.r, 0, 360) ctx.closePath(); ctx.fillStyle = &apos;rgba(204, 204, 204, 0.3)&apos;; ctx.fill(); } drawLine(ctx, _circle) { let dx = this.x - _circle.x; let dy = this.y - _circle.y; let d = Math.sqrt(dx * dx + dy * dy) if (d &lt; 150) { ctx.beginPath(); //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线： ctx.moveTo(this.x, this.y); //起始点 ctx.lineTo(_circle.x, _circle.y); //终点 ctx.closePath(); ctx.strokeStyle = &apos;rgba(204, 204, 204, 0.3)&apos;; ctx.stroke(); } } // 圆圈移动 // 圆圈移动的距离必须在屏幕范围内 move(w, h) { this._mx = (this.x &lt; w &amp;&amp; this.x &gt; 0) ? this._mx : (-this._mx); this._my = (this.y &lt; h &amp;&amp; this.y &gt; 0) ? this._my : (-this._my); this.x += this._mx / 2; this.y += this._my / 2; } } //鼠标点画圆闪烁变动 class currentCirle extends Circle { constructor(x, y) { super(x, y) } drawCircle(ctx) { ctx.beginPath(); //注释内容为鼠标焦点的地方圆圈半径变化 //this.r = (this.r &lt; 14 &amp;&amp; this.r &gt; 1) ? this.r + (Math.random() * 2 - 1) : 2; this.r = 8; ctx.arc(this.x, this.y, this.r, 0, 360); ctx.closePath(); //ctx.fillStyle = &apos;rgba(0,0,0,&apos; + (parseInt(Math.random() * 100) / 100) + &apos;)&apos; ctx.fillStyle = &apos;rgba(255, 77, 54, 0.3)&apos; ctx.fill(); } } //更新页面用requestAnimationFrame替代setTimeout window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame; let canvas = document.getElementById(&apos;canvas&apos;); let ctx = canvas.getContext(&apos;2d&apos;); let w = canvas.width = canvas.offsetWidth; let h = canvas.height = canvas.offsetHeight; let circles = []; let current_circle = new currentCirle(0, 0) let draw = function () { ctx.clearRect(0, 0, w, h); for (let i = 0; i &lt; circles.length; i++) { circles[i].move(w, h); circles[i].drawCircle(ctx); for (j = i + 1; j &lt; circles.length; j++) { circles[i].drawLine(ctx, circles[j]) } } if (current_circle.x) { current_circle.drawCircle(ctx); for (var k = 1; k &lt; circles.length; k++) { current_circle.drawLine(ctx, circles[k]) } } requestAnimationFrame(draw) } let init = function (num) { for (var i = 0; i &lt; num; i++) { circles.push(new Circle(Math.random() * w, Math.random() * h)); } draw(); } window.addEventListener(&apos;load&apos;, init(60)); window.onmousemove = function (e) { e = e || window.event; current_circle.x = e.clientX; current_circle.y = e.clientY; } window.onmouseout = function () { current_circle.x = null; current_circle.y = null; }; &lt;/script&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[极简搭建博客]]></title>
      <url>%2F2017%2F03%2F04%2F%E6%9E%81%E7%AE%80%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[极简搭建博客前言如果已经下载好Node、Hexo并且本地已经连好了Git,那么过程将非常的简单。如果想看详细的搭建内容欢迎去我的博客看另一篇文章。 初始化终端cd到一个你选定的目录（比如创建一个blog文件，$cd blog），执行hexo init命令： $ hexo init 在blog目录下，执行如下命令，安装npm： $ npm install 执行如下命令，开启hexo服务器： $ hexo s 此时，浏览器中打开网址http://localhost:4000，就能看到生成好的页面了 在blog文件夹目录下执行生成静态页面命令：$ hexo g 此时若出现如下报错： ERROR Local hexo not found in ~/blog ERROR Try runing: &apos;npm install hexo --save&apos; 则执行命令： npm install hexo --save 若无报错，自行忽略此步骤。再执行配置命令： $ hexo d 若执行命令hexo d仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git： $ npm install hexo-deployer-git --save $ hexo d命令执行成功后，浏览器中打开网址http://RainyXY.github.io（将RainyXY换成你的用户名）能看到和打开http://localhost:4000时一样的页面。 Github端在/blog/themes/landscape/source目录下新建文件名为：CNAME文件，注意没有后缀名！直接将自己的域名如：muyunyun.cn写入。 终端cd到blog目录下执行如下命令重新部署： $ hexo clean $ hexo g $ hexo d 网上许多都是说在Github上直接新建CNAME文件，如果这样的话，在你下一次执行hexo d部署命令后CNAME文件就消失了，因为本地没有此文件嘛。 安装theme你可以到Hexo官网主题页去搜寻自己喜欢的theme。这里以hexo-theme-next为例 终端cd到 blog 目录下执行如下命令： $ git clone https://github.com/iissnan/hexo-theme-next themes/next 将blog目录下_config.yml里theme的名称landscape修改为next 终端cd到blog目录下执行如下命令(每次部署文章的步骤)： $ hexo clean //清除缓存文件 (db.json) 和已生成的静态文件 (public) $ hexo g //生成缓存和静态文件 $ hexo d //重新部署到服务器]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Sublime Text 3 快捷键]]></title>
      <url>%2F2017%2F03%2F03%2FSublime-Text-3-%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
      <content type="text"><![CDATA[选择类 Ctrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。 Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。 Ctrl+L 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。 Ctrl+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。 Ctrl+Shift+M 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。 Ctrl+M 光标移动至括号内结束或开始的位置。 Ctrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。 Ctrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。 Ctrl+Shift+[ 选中代码，按下快捷键，折叠代码。 Ctrl+Shift+] 选中代码，按下快捷键，展开代码。 Ctrl+K+0 展开所有折叠代码。 Ctrl+← 向左单位性地移动光标，快速移动光标。 Ctrl+→ 向右单位性地移动光标，快速移动光标。 shift+↑ 向上选中多行。 shift+↓ 向下选中多行。 Shift+← 向左选中文本。 Shift+→ 向右选中文本。 Ctrl+Shift+← 向左单位性地选中文本。 Ctrl+Shift+→ 向右单位性地选中文本。 Ctrl+Shift+↑ 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。 Ctrl+Shift+↓ 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。 Ctrl+Alt+↑ 向上添加多行光标，可同时编辑多行。 Ctrl+Alt+↓ 向下添加多行光标，可同时编辑多行。 编辑类 Ctrl+J 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。 Ctrl+Shift+D 复制光标所在整行，插入到下一行。 Tab 向右缩进。 Shift+Tab 向左缩进。 Ctrl+K+K 从光标处开始删除代码至行尾。 Ctrl+Shift+K 删除整行。 Ctrl+/ 注释单行。 Ctrl+Shift+/ 注释多行。 Ctrl+K+U 转换大写。 Ctrl+K+L 转换小写。 Ctrl+Z 撤销。 Ctrl+Y 恢复撤销。 Ctrl+U 软撤销，感觉和 Gtrl+Z 一样。 Ctrl+F2 设置书签 Ctrl+T 左右字母互换。 F6 单词检测拼写 搜索类 Ctrl+F 打开底部搜索框，查找关键字。 Ctrl+shift+F 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。 Ctrl+P 打开搜索框。举个栗子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。 Ctrl+G 打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位。 Ctrl+R 打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数。 Ctrl+： 打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。 Ctrl+Shift+P 打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。Esc 退出光标多行选择，退出搜索框，命令框等。 显示类 Ctrl+Tab 按文件浏览过的顺序，切换当前窗口的标签页。 Ctrl+PageDown 向左切换当前窗口的标签页。 Ctrl+PageUp 向右切换当前窗口的标签页。 Alt+Shift+1 窗口分屏，恢复默认1屏（非小键盘的数字） Alt+Shift+2 左右分屏-2列 Alt+Shift+3 左右分屏-3列 Alt+Shift+4 左右分屏-4列 Alt+Shift+5 等分4屏 Alt+Shift+8 垂直分屏-2屏 Alt+Shift+9 垂直分屏-3屏 Ctrl+K+B 开启/关闭侧边栏。 F11 全屏模式 Shift+F11 免打扰模式]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo和Git搭建博客]]></title>
      <url>%2F2017%2F03%2F02%2Fhexo%E5%92%8Cgit%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[Hexo和Git搭建博客 准备工作1.node：用来生成静态页面的 到Node.js官网下载相应平台的最新版本，一路安装即可。 2.git: 把本地的hexo内容提交到github上去.没有安装的可以看此教程。 3.github：用来做博客的远程创库、域名、服务器。（~不多说了） 然后你还要知道一点点linux命令，域名解析相关知识（以上条件你都达到了，那么恭喜你30分钟搭建倒计时开始~） Git$ cd ~/. ssh #检查本机已存在的ssh密钥 如果提示：No such file or directory 说明你是第一次使用git。 $ ssh-keygen -t rsa -C &quot;邮件地址&quot; 然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key： 测试是否成功 $ ssh -T git@github.com # 注意邮箱地址不用改 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到： Hi RainyXY! You’ve successfully authenticated, but GitHub does not provide shell access. 看到这个信息说明SSH已配置成功！ $ git config --global user.name &quot;RainyXY&quot; // 你的github用户名，非昵称 $ git config --global user.email &quot;xxx@qq.com&quot; // 填写你的github注册邮箱 Hexo 安装 $ sudo npm install -g hexo 输入管理员密码即开始安装 注意坑1：Hexo官网上的安装命令是 $ npm install -g hexo-cli 安装时不要忘记前面加上sudo，否则会因为权限问题报错。 可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。 然后输入 npm install hexo --save 初始化 在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是D:\Rainy，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。 $ cd /d/Rainy/ $ hexo init hexo会自动下载一些文件到这个目录，包括node_modules， $ hexo g # 生成 $ hexo s # 启动服务 这里有必要提下Hexo常用的几个命令： hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹 hexo server (hexo s) 启动本地web服务，用于博客的预览 hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台） 另外还有其他几个常用命令： $ hexo new &quot;postName&quot; #新建文章 $ hexo new page &quot;pageName&quot; #新建页面 常用简写 $ hexo n == hexo new $ hexo g == hexo generate $ hexo s == hexo server $ hexo d == hexo deploy 常用组合 $ hexo d -g #生成部署 $ hexo s -g #生成预览 打开浏览器，输入localhost:4000,就可以在本地看到你的个人博客了 若打开失败下载个插件 Hexo 3.0 把服务器独立成了个别模块，您必须先安装 hexo-server 才能使用。 $ npm install hexo-server --save 安装完成后，输入以下命令以启动服务器，您的网站会在 http://localhost:4000 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。 $ hexo server 如果您想要更改端口，或是在执行时遇到了 EADDRINUSE 错误，可以在执行时使用 -p 选项指定其他端口或者用IE浏览器打开，如下： $ hexo server -p 5000 管理博客 配置信息 使用Sublime_Text（绿色软件无需安装，解压即可使用）或者其他编辑器都可以打开blog/_config.yml文件，进行配置 修改主题 既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是 官方主题。 个人比较喜欢的2个主题：hexo-theme-jekyll 和 hexo-theme-yilia。 首先下载这个主题： $ cd /d/blog/ $ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 修改_config.yml中的theme: landscape改为theme:yilia，然后重新执行hexo g来重新生成。 如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。 上传之前在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。 上传到github如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。 首先，ssh key肯定要配置好。 其次，配置_config.yml中有关deploy的部分 #博客名称 title: 我的博客 #副标题 subtitle: #简介 description: #博客作者 author: Rainy #博客语言 language: zh-CN #时区 timezone: #博客地址,与申请的GitHub一致 url: http://RainyXY.github.io root: / #博客链接格式 permalink: :year/:month/:day/:title/ permalink_defaults: source_dir: source public_dir: public tag_dir: tags archive_dir: archives category_dir: categories code_dir: downloads/code i18n_dir: :lang skip_render: new_post_name: title.md # File name of new posts default_layout: post titlecase: false # Transform title into titlecase external_link: true # Open external links in new tab filename_case: 0 render_drafts: false post_asset_folder: false relative_link: false future: true highlight: enable: true line_number: true auto_detect: true tab_replace: default_category: uncategorized category_map: tag_map: #日期格式 date_format: YYYY-MM-DD time_format: HH:mm:ss #分页，每页文章数量 per_page: 10 pagination_dir: page #博客主题 theme: landscape #发布设置 deploy: type: git #RainyXY改为你的github用户名 repo: git@github.com:RainyXYRainyXY.github.io.git branch: master 注意坑2：在配置所有的_config.yml文件时（包括theme中的），在所有的冒号:后边都要加一个空格，否则执行hexo命令会报错，切记 切记 上传之前 在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。 上传到github 在blog文件夹目录下执行生成静态页面命令： $ hexo generate 或者：hexo g 此时若出现如下报错： ERROR Local hexo not found in ~/blog ERROR Try runing: &apos;npm install hexo --save&apos; 则执行命令： npm install hexo --save 若无报错，自行忽略此步骤。 再执行配置命令： $ hexo deploy 或者：hexo d 注意坑3：若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git： $ npm install hexo-deployer-git --save 如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。 首先，ssh key肯定要配置好。 其次，配置_config.yml中有关deploy的部分： 正确写法： deploy: type: git repository: git@github.com:liuxianan/liuxianan.github.io.git branch: master 发布博客 设置git身份信息 $ git config --global user.name &quot;你的用户名&quot; $ git config --global user.email &quot;你的邮箱&quot; 安装hexo git插件 $ cnpm install hexo-deployer-git --save 发布更新博客 $ hexo d -g 发布时需要输入github的帐号和密码，输入密码时是看不到自己输入的内容的 发布成功后，访问yourname.github.io看下成果]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[前端总结]]></title>
      <url>%2F2017%2F03%2F01%2F%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[互联网的飞速发展和激烈竞争，用户体验成为了一个重要的关注点，导致前端开发成为一个热门职业，而前段技术也在不断的更新，不断的推陈出新。个人觉得前端开发入门相对容易，但还是需要系统的学习，打下坚实的基础，从而基础就是开发令用户满意的体验效果的基石。web是基于Internet的一个多媒体信息服务系统。 前端开发的必备技能 我觉得前端开发最应该掌握熟练的技能： 1、html语法、标签、语义。 2、Css：一、样式规范、书写规范；二、选择器；三、与html配合布局；四、常见浏览器的兼容；五、ss3(animation、gradient等等)。 3、Javascript语言、jq，对DOM、文档等的操作，方法的封装、功能插件化，node.js等的基础和常用api。 4、框架：Bootstrap等一系列的框架，提高项目效率和可扩展性。 在工作中只有熟练的掌握这些技能才能更好的完成项目、才能在项目中遇到新技术时更加快速的学习，并运用到项目中。 前端开发除了这些技能还有很多技能，前端是个庞大的技能树。 前端开发应掌握的工具 只有恰当的工具才能提升我们的工作效率，及学习效率。从而将中单放到工作中，学习中。 1、编译工具：Dreamweaver、webStorm、sublime Text等编译工具。 2、测试工具：手机端的微信web开发者工具。 3、浏览器：Google Chrome、mozilla firefox对各种标准很好的支持，同时自带调试功能，能有效的调试代码BUG，提升工作效率。 4、辅助工具：PhotoShop切图、编辑图片、取色等。 5、版本控制工具：git版本控制器分布式管理系统，可以创建多个分支，使大家分工明确，更方便讲前端组件化模块化。 6、本地服务器工具：XAMPP、WampServer 等。 开发总结 1、在过去的开发中让我认识到前端组件化，模块化的重要性。 2、书写规范： 1）html书写规范：html书写要符合语义。 2）Css样式书写规范：应用属性的精简写法提高观赏性和提高性能；使用多重选择器，提高可重用性；减少层级写法，少使用id，id是唯一标识。 3）命名面向属性和面向对象还命名。 4）使用标准的编码utf-8。 5）Js操作元素，使用的class，不添加任何样式，只做操作。同时命名也必须规范如js-**-**、js-**_**等等。 3、调试工具：chrome dev tools：前端开发调试利器，着重注意几个功能： 1）console 2）elements:元素样式调整 3）network：查看每个请求，非常重要，前后端联调必备 4）timeline：分析渲染、js执行等等各个阶段，性能优化利器 5）emulation：模拟移动端环境，mobile页面开发必备 使用jQuery jQuery 是一个 JavaScript 库。 jQuery 极大地简化了 JavaScript 编程。 jQuery 很容易学习。 Jq里面封装了很多方法可以直接使用：如文档操作html()、属性操作attr()、css操作css()、自定义动画效果操作animate()等。 极大的提升我们前端开发过程。 使用swiper Swiper是一款强大的动画效果插件，兼容pc、手机。 前端开发应掌握的工具 只有恰当的工具才能提升我们的工作效率，及学习效率。从而将中单放到工作中，学习中。 1、编译工具：Dreamweaver、webStorm、sublime Text等编译工具。 2、测试工具：手机端的微信web开发者工具。 3、浏览器：Google Chrome、mozilla firefox对各种标准很好的支持，同时自带调试功能，能有效的调试代码BUG，提升工作效率。 4、辅助工具：PhotoShop切图、编辑图片、取色等。 5、版本控制工具：git版本控制器分布式管理系统，可以创建多个分支，使大家分工明确，更方便讲前端组件化模块化。 6、本地服务器工具：XAMPP、WampServer 等。 开发总结 1、在过去的开发中让我认识到前端组件化，模块化的重要性。 2、书写规范： 1）html书写规范：html书写要符合语义。 2）Css样式书写规范：应用属性的精简写法提高观赏性和提高性能；使用多重选择器，提高可重用性；减少层级写法，少使用id，id是唯一标识。 3）命名面向属性和面向对象还命名。 4）使用标准的编码utf-8。 5）Js操作元素，使用的class，不添加任何样式，只做操作。同时命名也必须规范如js-**-**、js-**_**等等。 3、调试工具：chrome dev tools：前端开发调试利器，着重注意几个功能： 1）console 2）elements:元素样式调整 3）network：查看每个请求，非常重要，前后端联调必备 4）timeline：分析渲染、js执行等等各个阶段，性能优化利器 5）emulation：模拟移动端环境，mobile页面开发必备 使用jQuery jQuery 是一个 JavaScript 库。 jQuery 极大地简化了 JavaScript 编程。 jQuery 很容易学习。 Jq里面封装了很多方法可以直接使用：如文档操作html()、属性操作attr()、css操作css()、自定义动画效果操作animate()等。 极大的提升我们前端开发过程。 使用swiper Swiper是一款强大的动画效果插件，兼容pc、手机。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F02%2F28%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
